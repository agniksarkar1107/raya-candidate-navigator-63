from fastapi import APIRouter, HTTPException, Depends, Request, Body
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import json
import os
import traceback

from utils.gemini_utils import generate_response
from utils.serper_utils import search_and_extract

router = APIRouter()

class ChatMessage(BaseModel):
    role: str
    content: str

class ChatRequest(BaseModel):
    messages: List[ChatMessage]
    use_web_search: bool = False
    search_query: Optional[str] = None

class WebSearchRequest(BaseModel):
    query: str
    num_results: int = 5

# Mock response generator
def mock_generate_response(prompt="", system_message="", temperature=0.7):
    """Mock implementation that returns a hardcoded response"""
    return "This is a mock response from the AI assistant. In a production environment, this would be generated by Gemini or another AI model based on your input."

# Mock search function
async def mock_search_and_extract(query, num_results=5):
    """Mock implementation that returns hardcoded search results"""
    return [
        {
            "title": "Mock Search Result 1",
            "snippet": "This is a sample search result that would normally come from a search API.",
            "link": "https://example.com/result1"
        },
        {
            "title": "Mock Search Result 2",
            "snippet": "Another example search result that demonstrates how real results would appear.",
            "link": "https://example.com/result2"
        }
    ]

@router.post("/chat")
async def chat(request: ChatRequest):
    """
    Process a chat request with the AI assistant.
    
    Args:
        request (ChatRequest): The chat request containing messages and options.
    
    Returns:
        Dict: Response with generated message.
    """
    try:
        print(f"Processing chat request with {len(request.messages)} messages")
        
        # Extract the last user message
        user_messages = [msg for msg in request.messages if msg.role == "user"]
        if not user_messages:
            print("Error: No user message found")
            raise HTTPException(status_code=400, detail="No user message found")
        
        last_user_message = user_messages[-1].content
        print(f"Last user message: {last_user_message[:50]}...")
        
        # Extract conversation history
        conversation_history = ""
        for msg in request.messages[:-1]:  # Exclude the last message
            conversation_history += f"{msg.role.upper()}: {msg.content}\n"
        
        # Base system message with HR tech focus and domain restriction
        system_message = """
        You are Raya, an AI assistant specialized EXCLUSIVELY in HR technology and recruitment.
        You ONLY answer questions related to HR, recruiting, talent acquisition, employee management, 
        HR technology platforms, applicant tracking systems, and other HR-related topics.
        
        If a user asks a question outside the HR domain, politely explain that you can only 
        provide information on HR and recruitment topics, and suggest they rephrase their question 
        to be HR-related.
        
        When providing answers:
        1. Be professional, helpful, and concise
        2. Do NOT use markdown formatting or asterisks (*) in your responses
        3. Present information in clear, plain text
        4. Use bullet points with simple dashes (-) when appropriate
        
        If you don't know something, admit it and offer alternative HR-focused suggestions.
        When drafting emails or content, follow professional HR communication standards.
        """
        
        # Check if web search is requested
        web_search_results = None
        web_search_performed = False
        
        if request.use_web_search and request.search_query:
            print(f"Web search requested for: {request.search_query}")
            try:
                web_search_results = await search_and_extract(request.search_query)
                web_search_performed = True
                print(f"Web search returned {len(web_search_results)} results")
            except Exception as search_error:
                print(f"Web search error: {search_error}")
                traceback.print_exc()
                # Continue even if search fails
            
            # Add web search results to system message, with EXPLICIT instructions to use them
            if web_search_results:
                system_message += """

IMPORTANT: I am providing you with real-time web search results below. USE THIS INFORMATION to answer the user's question. 
Do NOT tell the user you don't have access to real-time information, because you DO have access through these web search results.
Always acknowledge that you're using information from web search results when crafting your response.

WEB SEARCH RESULTS:
"""
                for i, result in enumerate(web_search_results[:5], 1):
                    system_message += f"\n{i}. {result.get('title', 'No title')}\n"
                    system_message += f"   {result.get('snippet', 'No snippet')}\n"
                    system_message += f"   URL: {result.get('link', 'No link')}\n"
                
                system_message += """
INSTRUCTIONS FOR USING SEARCH RESULTS:
1. Extract relevant information from these search results
2. Synthesize this information to answer the user's question about HR topics only
3. Cite information from specific sources when appropriate
4. Explicitly mention that your answer is based on web search results
5. If the search results don't fully answer the question, acknowledge this limitation
6. Remember to NOT use asterisks (*) or markdown formatting in your response
"""
        
        # Add conversation history to prompt
        full_prompt = f"Conversation history:\n{conversation_history}\n\nUser: {last_user_message}"
        
        # Generate response
        print("Calling Gemini API for response...")
        ai_response = generate_response(
            prompt=full_prompt,
            system_message=system_message,
            temperature=0.7
        )
        print(f"Received AI response: {ai_response[:50]}...")
        
        # Check if response indicates an error
        if ai_response.startswith("Error generating response:"):
            print(f"Error from Gemini API: {ai_response}")
            raise Exception(ai_response)
        
        # Post-process to remove any asterisks and markdown formatting
        ai_response = ai_response.replace("**", "").replace("*", "")
        
        # Create response
        response = {
            "message": {
                "role": "assistant",
                "content": ai_response
            },
            "web_search_used": web_search_performed and bool(web_search_results)
        }
        
        print("Successfully generated response")
        return response
    
    except Exception as e:
        error_detail = f"Error processing chat request: {str(e)}"
        print(error_detail)
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=error_detail)

@router.post("/search")
async def web_search(request: WebSearchRequest):
    """
    Perform a web search using the Serper API.
    
    Args:
        request (WebSearchRequest): The web search request.
    
    Returns:
        Dict: Web search results.
    """
    try:
        search_results = await mock_search_and_extract(request.query, request.num_results)
        return {"results": search_results}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error performing web search: {str(e)}")

@router.post("/draft-email")
async def draft_email(
    request: Dict[str, Any] = Body(...)
):
    """
    Draft an email using the AI assistant.
    
    Args:
        request (Dict): Request body containing email parameters.
    
    Returns:
        Dict: Response with generated email.
    """
    try:
        # Extract parameters
        recipient = request.get("recipient", "Candidate")
        job_description = request.get("job_description", "")
        company_name = request.get("company_name", "Our Company")
        context = request.get("context", "")
        
        if not job_description:
            raise HTTPException(status_code=400, detail="Job description is required")
        
        # Generate mock email content
        email_content = f"""
Dear {recipient},

I hope this email finds you well. I'm reaching out from {company_name} regarding an exciting opportunity that I believe aligns with your background.

We're currently looking for a talented professional for our {job_description} role, and your profile caught my attention.

Would you be interested in discussing this opportunity further? If so, please let me know when you might be available for a brief call.

Best regards,
Recruiter
{company_name}
        """
        
        # Generate subject line
        subject = f"Exciting Opportunity at {company_name}: {job_description.split()[0:3] if isinstance(job_description, str) and job_description else ''}..."
        
        return {
            "subject": subject,
            "body": email_content
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error drafting email: {str(e)}") 